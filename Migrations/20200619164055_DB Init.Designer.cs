// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using maple_web_api.Models;

namespace maple_web_api.Migrations
{
    [DbContext(typeof(InsuranceInfoContext))]
    [Migration("20200619164055_DB Init")]
    partial class DBInit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ContractItem", b =>
                {
                    b.Property<int>("ContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CoverageId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<double>("NetPrice")
                        .HasColumnType("float");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ContractId");

                    b.HasIndex("CoverageId");

                    b.HasIndex("CustomerId");

                    b.ToTable("ContractItems");
                });

            modelBuilder.Entity("CoveragePlanItem", b =>
                {
                    b.Property<int>("PlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EligibilityCountry")
                        .HasColumnType("int");

                    b.Property<DateTime>("EligibilityDateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EligibilityDateTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlanId");

                    b.ToTable("CoveragePlans");

                    b.HasData(
                        new
                        {
                            PlanId = 1,
                            EligibilityCountry = 0,
                            EligibilityDateFrom = new DateTime(2009, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EligibilityDateTo = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlanName = "Gold"
                        },
                        new
                        {
                            PlanId = 2,
                            EligibilityCountry = 1,
                            EligibilityDateFrom = new DateTime(2005, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EligibilityDateTo = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlanName = "Platinum"
                        },
                        new
                        {
                            PlanId = 3,
                            EligibilityCountry = 2,
                            EligibilityDateFrom = new DateTime(2001, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EligibilityDateTo = new DateTime(2026, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlanName = "Silver"
                        });
                });

            modelBuilder.Entity("Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Country")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("RateChartItem", b =>
                {
                    b.Property<long>("RateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CuttoffAge")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int>("NetPrice")
                        .HasColumnType("int");

                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.HasKey("RateId");

                    b.HasIndex("PlanId");

                    b.ToTable("RateCharts");

                    b.HasData(
                        new
                        {
                            RateId = 1L,
                            CuttoffAge = 41,
                            Gender = 0,
                            NetPrice = 1000,
                            PlanId = 1
                        },
                        new
                        {
                            RateId = 2L,
                            CuttoffAge = 200,
                            Gender = 0,
                            NetPrice = 2000,
                            PlanId = 1
                        },
                        new
                        {
                            RateId = 3L,
                            CuttoffAge = 41,
                            Gender = 1,
                            NetPrice = 1200,
                            PlanId = 1
                        },
                        new
                        {
                            RateId = 4L,
                            CuttoffAge = 200,
                            Gender = 1,
                            NetPrice = 2500,
                            PlanId = 1
                        },
                        new
                        {
                            RateId = 5L,
                            CuttoffAge = 41,
                            Gender = 0,
                            NetPrice = 1500,
                            PlanId = 3
                        },
                        new
                        {
                            RateId = 6L,
                            CuttoffAge = 200,
                            Gender = 0,
                            NetPrice = 2600,
                            PlanId = 3
                        },
                        new
                        {
                            RateId = 7L,
                            CuttoffAge = 41,
                            Gender = 1,
                            NetPrice = 1900,
                            PlanId = 3
                        },
                        new
                        {
                            RateId = 8L,
                            CuttoffAge = 200,
                            Gender = 1,
                            NetPrice = 2800,
                            PlanId = 3
                        },
                        new
                        {
                            RateId = 9L,
                            CuttoffAge = 41,
                            Gender = 0,
                            NetPrice = 1900,
                            PlanId = 2
                        },
                        new
                        {
                            RateId = 10L,
                            CuttoffAge = 200,
                            Gender = 0,
                            NetPrice = 2900,
                            PlanId = 2
                        },
                        new
                        {
                            RateId = 11L,
                            CuttoffAge = 41,
                            Gender = 1,
                            NetPrice = 2100,
                            PlanId = 2
                        },
                        new
                        {
                            RateId = 12L,
                            CuttoffAge = 200,
                            Gender = 1,
                            NetPrice = 3200,
                            PlanId = 2
                        });
                });

            modelBuilder.Entity("ContractItem", b =>
                {
                    b.HasOne("CoveragePlanItem", "CoveragePlan")
                        .WithMany()
                        .HasForeignKey("CoverageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RateChartItem", b =>
                {
                    b.HasOne("CoveragePlanItem", "CoveragePlan")
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
